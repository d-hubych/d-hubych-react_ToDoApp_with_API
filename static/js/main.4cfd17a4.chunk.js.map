{"version":3,"sources":["utils/fetchClient.ts","types/ErrorType.ts","types/TodoCondition.ts","pages/AuthorizationPage.tsx","utils/contsnts.ts","utils/filterTodos.ts","api/todos.ts","components/Header/Header.tsx","utils/noop.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Footer/Footer.tsx","components/ErrorMessage/ErrorMessage.tsx","pages/TodosPage.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","requestOnServer","a","fetch","response","ok","Error","json","ErrorType","TodoCondition","client","AuthorizationPage","setUser","useState","email","setEmail","name","setName","isUserNotFound","setIsUserNotFound","errAuthorization","setErrAuthorization","isDisabledInput","setIsDisabledInput","isLoading","setIsLoading","className","onSubmit","e","preventDefault","length","handleReceivedUser","receivedUser","user","id","localStorage","setItem","result","postNewUser","getUser","onAuthorizationSubmit","type","placeholder","value","onChange","target","cn","disabled","minLength","deleteTodo","todoId","changeTodo","Header","containsActive","handleError","setTodoCondition","onTrickTempTodo","setTodos","toggleAllTodos","USER_ID","title","setTitle","isInputDisabled","setIsInputDisabled","classNames","active","aria-label","onClick","event","EmptyInput","Saving","newTodo","userId","completed","prev","Add","Neutral","addNewTodoOnServer","handleSubmit","noop","TodoItem","todo","todoCondition","onDeleteTodo","toggleTodo","handleSubmitEditing","isEditing","setIsEditing","editTitle","setEditTitle","onBlurOrSubmit","onDoubleClick","checked","onBlur","onKeyUp","key","TodoList","todos","procesingTodosId","map","thisTodoCondition","includes","Footer","containsCompleted","onClearCompleted","itemsLeft","to","isActive","selected","style","visibility","ErrorMessage","errorType","hidden","None","TodosPage","setErrorType","setProcesingTodosId","tempTodo","setTempTodo","pathname","useLocation","navigate","useNavigate","err","useEffect","Load","getTodosFromSrver","todosStatus","useMemo","some","isCompleted","deleteTodoOnServer","filter","Delete","toggleTodos","curentTodos","forEach","curentTodo","state","copyTodos","indexCurTodo","findIndex","newStatus","Update","toggleTodoOnServer","filteredTodos","filterTodos","console","log","toUpperCase","removeItem","Deleting","newTitle","prevTodos","changeTodoOnServer","App","stringUser","getItem","parse","getLocalUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cfd17a4.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: {} | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  const requestOnServer = async () => {\n    await wait(300);\n\n    const response = await fetch(BASE_URL + url, options);\n\n    if (!response.ok) {\n      throw new Error('Something went wrong with the request to the server');\n    }\n\n    return response.json();\n  };\n\n  return requestOnServer();\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: {}) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: {}) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  None = 'None',\n  Add = 'Add',\n  Delete = 'Delete',\n  Update = 'Update',\n  Load = 'Load',\n  EmptyInput = 'EmptyInput',\n}\n","// eslint-disable-next-line no-shadow\nexport enum TodoCondition {\n  Neutral = 'Neutral',\n  Saving = 'Saving',\n  Deleting = 'Deleting',\n}\n","import React, {\n  FC,\n  useState,\n  FormEvent,\n  Dispatch,\n  SetStateAction,\n  ChangeEvent,\n} from 'react';\nimport cn from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\nimport { minInputLength } from '../utils/contsnts';\n\ntype Props = {\n  setUser: Dispatch<SetStateAction<User | null>>;\n};\n\nexport const AuthorizationPage: FC<Props> = ({ setUser }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [isUserNotFound, setIsUserNotFound] = useState<boolean>(false);\n  const [errAuthorization, setErrAuthorization] = useState<boolean>(false);\n  const [isDisabledInput, setIsDisabledInput] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleEmailInput = (e: ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.target.value);\n  };\n\n  const onAuthorizationSubmit = (\n    e: FormEvent<HTMLFormElement> | FormEvent<HTMLButtonElement>,\n  ) => {\n    e.preventDefault();\n\n    if (email.length < minInputLength) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const handleReceivedUser = (receivedUser: User) => {\n      const user = {\n        id: receivedUser.id,\n        email: receivedUser.email,\n        name: receivedUser.name,\n      };\n\n      setUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n    };\n\n    if (isUserNotFound) {\n      if (name.length < minInputLength) {\n        setIsLoading(false);\n\n        return;\n      }\n\n      const postNewUser = async () => {\n        try {\n          const result = await client.post<User>('/users', { email, name });\n\n          handleReceivedUser(result);\n        } catch {\n          setErrAuthorization(true);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n      postNewUser();\n    } else {\n      const getUser = async () => {\n        try {\n          const result = await client.get<User[]>(`/users?email=${email}`);\n\n          const user = result[0];\n\n          if (user) {\n            handleReceivedUser(user);\n          } else {\n            setIsUserNotFound(true);\n            setIsDisabledInput(true);\n          }\n        } catch {\n          setErrAuthorization(true);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n\n      getUser();\n    }\n  };\n\n  // eslint-disable-next-line\n  // console.log('render');\n\n  return (\n    <div className=\"todoapp authorization\">\n      <div className=\"todoapp__content authorization__content\">\n        Please, login to get yours todos\n\n        <form\n          method=\"post\"\n          onSubmit={(e) => onAuthorizationSubmit(e)}\n          className=\"authorization__form\"\n        >\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={handleEmailInput}\n            className={cn(\n              'input is-primary',\n              'authorization__input',\n            )}\n            disabled={isDisabledInput}\n            minLength={minInputLength}\n          />\n\n          {isUserNotFound && (\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter your name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              minLength={minInputLength}\n              className={cn(\n                'input is-primary',\n                'authorization__input',\n              )}\n            />\n          )}\n\n          <button\n            type=\"submit\"\n            className={cn(\n              'button',\n              'is-primary',\n              { 'is-loading': isLoading },\n            )}\n          >\n            confirm\n          </button>\n        </form>\n\n        {errAuthorization && (\n          <p className=\"authorization__error\">\n            Something went wrong with the authorization.\n          </p>\n        )}\n      </div>\n    </div>\n  );\n};\n","export const minInputLength = 3;\n","import { Todo } from '../types/Todo';\n\nexport const filterTodos = (todos: Todo[], pathname: string) => {\n  switch (pathname) {\n    case '/completed':\n      return todos.filter(todo => todo.completed === true);\n    case '/active':\n      return todos.filter(todo => todo.completed === false);\n    default:\n      return todos;\n  }\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const addTodo = (todo: Todo): Promise<Todo> => {\n  return client.post('/todos/', todo);\n};\n\nexport const changeTodo = (todoId: number, data: {}) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n","import React, {\n  FC,\n  useState,\n  FormEvent,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../../types/ErrorType';\nimport { Todo } from '../../types/Todo';\nimport { addTodo } from '../../api/todos';\nimport { TodoCondition } from '../../types/TodoCondition';\n\ntype Props = {\n  containsActive: boolean,\n  handleError: (err: ErrorType) => void,\n  setTodoCondition: (arg: TodoCondition) => void,\n  onTrickTempTodo: (newTodo: Todo | null) => void,\n  setTodos: Dispatch<SetStateAction<Todo[]>>,\n  toggleAllTodos: () => void,\n  USER_ID: number,\n};\n\nexport const Header: FC<Props> = ({\n  containsActive,\n  handleError,\n  setTodoCondition,\n  onTrickTempTodo,\n  setTodos,\n  toggleAllTodos,\n  USER_ID,\n}) => {\n  const [title, setTitle] = useState<string>('');\n  const [isInputDisabled, setIsInputDisabled] = useState<boolean>(false);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title) {\n      return handleError(ErrorType.EmptyInput);\n    }\n\n    setIsInputDisabled(true);\n    setTodoCondition(TodoCondition.Saving);\n\n    const newTodo = {\n      id: 0,\n      userId: USER_ID,\n      title,\n      completed: false,\n    };\n\n    onTrickTempTodo(newTodo);\n    setTitle('');\n\n    const addNewTodoOnServer = async () => {\n      const result = await addTodo(newTodo);\n\n      try {\n        onTrickTempTodo(null);\n        setTodos((prev: Todo[]) => [...prev, result]);\n      } catch {\n        handleError(ErrorType.Add);\n      } finally {\n        setTodoCondition(TodoCondition.Neutral);\n        setIsInputDisabled(false);\n      }\n    };\n\n    return addNewTodoOnServer();\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={classNames(\n          'todoapp__toggle-all',\n          { active: containsActive },\n        )}\n        aria-label=\"Complete all todos button\"\n        onClick={toggleAllTodos}\n      />\n\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={({ target }) => setTitle(target.value)}\n          disabled={isInputDisabled}\n        />\n      </form>\n    </header>\n  );\n};\n","// noop is No Operation function for some undefined props\nexport const noop = () => {};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoCondition } from '../../types/TodoCondition';\nimport { noop } from '../../utils/noop';\n\ntype Props = {\n  todo: Todo,\n  todoCondition: TodoCondition,\n  onDeleteTodo?: (todoId: number) => void,\n  toggleTodo?: (curentTodos: Todo[], isCompleted?: boolean) => void,\n  handleSubmitEditing?: (id: number, editTitle: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  todoCondition,\n  onDeleteTodo = noop,\n  toggleTodo = noop,\n  handleSubmitEditing = noop,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editTitle, setEditTitle] = useState(title);\n\n  const handleSubmit = () => {\n    if (editTitle === '') {\n      onDeleteTodo(id);\n    }\n\n    if (editTitle !== title) {\n      handleSubmitEditing(id, editTitle);\n    }\n\n    setIsEditing(false);\n  };\n\n  const cancelEditing = (key: string) => {\n    if (key === 'Escape') {\n      setIsEditing(false);\n      setEditTitle(title);\n    }\n  };\n\n  const onBlurOrSubmit = (e: React.FocusEvent<HTMLInputElement>\n  | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    handleSubmit();\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEditTitle(e.target.value);\n  };\n\n  const onKeyUp = (e: React.KeyboardEvent) => {\n    cancelEditing(e.key);\n  };\n\n  return (\n    <div\n      className={classNames(\n        'todo',\n        { completed },\n      )}\n      onDoubleClick={() => setIsEditing(true)}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={() => toggleTodo([todo])}\n        />\n      </label>\n\n      {isEditing\n        ? (\n          <form onSubmit={onBlurOrSubmit}>\n            <input\n              type=\"text\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              value={editTitle}\n              onChange={onChange}\n              onBlur={onBlurOrSubmit}\n              onKeyUp={onKeyUp}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span className=\"todo__title\">{title}</span>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => onDeleteTodo(id)}\n            >\n              x\n            </button>\n          </>\n        )}\n\n      <div className={classNames(\n        'modal',\n        'overlay',\n        { 'is-active': todoCondition !== TodoCondition.Neutral },\n      )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\nimport { TodoCondition } from '../../types/TodoCondition';\n\ntype Props = {\n  todos: Todo[],\n  onDeleteTodo: (todoId: number) => void,\n  procesingTodosId: number[],\n  todoCondition: TodoCondition,\n  toggleTodo: (curentTodo: Todo[], isCompleted?: boolean) => void,\n  handleSubmitEditing: (id: number, updatedTitle: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onDeleteTodo,\n  procesingTodosId,\n  todoCondition,\n  toggleTodo,\n  handleSubmitEditing,\n}) => {\n  return (\n    <>\n      {todos.map((todo: Todo) => {\n        let thisTodoCondition = TodoCondition.Neutral;\n\n        if (procesingTodosId.includes(todo.id)) {\n          thisTodoCondition = todoCondition;\n        }\n\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onDeleteTodo={onDeleteTodo}\n            todoCondition={thisTodoCondition}\n            toggleTodo={toggleTodo}\n            handleSubmitEditing={handleSubmitEditing}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  containsCompleted: boolean,\n  onClearCompleted: () => void,\n  itemsLeft: number,\n};\n\nexport const Footer: FC<Props> = ({\n  containsCompleted,\n  onClearCompleted,\n  itemsLeft,\n}) => {\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeft} items left`}\n      </span>\n\n      <nav className=\"filter\">\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          All\n        </NavLink>\n\n        <NavLink\n          to=\"active\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          Active\n        </NavLink>\n\n        <NavLink\n          to=\"completed\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          Completed\n        </NavLink>\n      </nav>\n\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        style={{ visibility: containsCompleted ? 'visible' : 'hidden' }}\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType,\n  handleError: (err: ErrorType) => void,\n};\n\nexport const ErrorMessage: FC<Props> = ({ errorType, handleError }) => (\n  <div className={classNames(\n    'notification',\n    'is-danger',\n    'is-light',\n    'has-text-weight-normal',\n    { hidden: errorType === ErrorType.None },\n  )}\n  >\n    <button\n      type=\"button\"\n      className=\"delete\"\n      onClick={() => handleError(ErrorType.None)}\n      aria-label=\"close error\"\n    />\n    {errorType === ErrorType.EmptyInput\n      ? \"Title can't be empty\"\n      : `Unable to ${errorType} a todo`}\n  </div>\n);\n","import React, {\n  FC,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Todo } from '../types/Todo';\nimport { ErrorType } from '../types/ErrorType';\nimport { TodoCondition } from '../types/TodoCondition';\nimport { User } from '../types/User';\n\nimport { filterTodos } from '../utils/filterTodos';\nimport {\n  deleteTodo,\n  getTodos,\n  changeTodo,\n} from '../api/todos';\n\nimport { Header } from '../components/Header';\nimport { TodoList } from '../components/TodoList';\nimport { TodoItem } from '../components/TodoItem';\nimport { Footer } from '../components/Footer/Footer';\nimport { ErrorMessage } from '../components/ErrorMessage';\n\ntype Props = {\n  user: User,\n};\n\nexport const TodosPage: FC<Props> = ({ user }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorType, setErrorType] = useState(ErrorType.None);\n  const [todoCondition, setTodoCondition]\n    = useState<TodoCondition>(TodoCondition.Neutral);\n  const [procesingTodosId, setProcesingTodosId] = useState<number[]>([]);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const USER_ID = user.id;\n\n  const handleError = (err: ErrorType) => {\n    if (err !== ErrorType.None) {\n      setTimeout(() => setErrorType(ErrorType.None), 3000);\n    }\n\n    setErrorType(err);\n  };\n\n  useEffect(() => {\n    if (USER_ID) {\n      const getTodosFromSrver = async () => {\n        const result = await getTodos(USER_ID);\n\n        try {\n          setTodos(result);\n        } catch {\n          handleError(ErrorType.Load);\n        }\n      };\n\n      getTodosFromSrver();\n    }\n  }, [USER_ID]);\n\n  const todosStatus = useMemo(() => {\n    return {\n      isActive: todos.some(todo => todo.completed === false),\n      isCompleted: todos.some(todo => todo.completed === true),\n    };\n  }, [todos]);\n\n  const deleteTodoOnServer = async (todoId: number) => {\n    await deleteTodo(todoId);\n\n    try {\n      setTodos(prev => prev.filter(({ id }) => id !== todoId));\n    } catch {\n      handleError(ErrorType.Delete);\n    } finally {\n      setTodoCondition(TodoCondition.Neutral);\n    }\n  };\n\n  const handleDeleteTodo = (todoId: number) => {\n    setTodoCondition(TodoCondition.Deleting);\n    setProcesingTodosId([todoId]);\n    deleteTodoOnServer(todoId);\n  };\n\n  const clearCompleted = () => {\n    setTodoCondition(TodoCondition.Deleting);\n\n    todos?.forEach(todo => {\n      if (todo.completed) {\n        setProcesingTodosId((state) => [...state, todo.id]);\n        deleteTodoOnServer(todo.id);\n      }\n    });\n  };\n\n  const toggleTodos = (curentTodos: Todo[], isCompleted?: boolean) => {\n    setTodoCondition(TodoCondition.Saving);\n\n    curentTodos.forEach(curentTodo => {\n      if (curentTodo.completed !== isCompleted) {\n        setProcesingTodosId((state) => [...state, curentTodo.id]);\n      }\n\n      const copyTodos = [...todos];\n      const indexCurTodo = copyTodos\n        .findIndex(({ id }) => id === curentTodo.id);\n      const newStatus: boolean = isCompleted || !curentTodo.completed;\n\n      copyTodos[indexCurTodo].completed = newStatus;\n\n      const toggleTodoOnServer = async () => {\n        await changeTodo(curentTodo.id, { completed: newStatus });\n\n        try {\n          setTodos(copyTodos);\n        } catch {\n          handleError(ErrorType.Update);\n        } finally {\n          setProcesingTodosId([]);\n          setTodoCondition(TodoCondition.Neutral);\n        }\n      };\n\n      toggleTodoOnServer();\n    });\n  };\n\n  const toggleAllTodos = () => {\n    toggleTodos(todos, todosStatus.isActive);\n  };\n\n  const handleSubmitEditing = (todoId: number, newTitle: string) => {\n    setProcesingTodosId([todoId]);\n    setTodoCondition(TodoCondition.Saving);\n\n    const changeTodoOnServer = async () => {\n      await changeTodo(todoId, { title: newTitle });\n\n      try {\n        setTodos(prevTodos => prevTodos.map(todo => {\n          if (todo.id === todoId) {\n            return {\n              ...todo,\n              title: newTitle,\n            };\n          }\n\n          return todo;\n        }));\n      } catch {\n        setErrorType(ErrorType.Update);\n      } finally {\n        setProcesingTodosId([]);\n        setTodoCondition(TodoCondition.Neutral);\n      }\n    };\n\n    changeTodoOnServer();\n  };\n\n  const onLogout = () => {\n    localStorage.removeItem('user');\n    navigate(0);\n  };\n\n  const filteredTodos = todos ? filterTodos(todos, pathname) : [];\n\n  //  eslint-disable-next-line\n  console.log('render');\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__user\">\n        {`Hello ${user.name.toUpperCase()} 😊`}\n\n        <button\n          type=\"button\"\n          onClick={onLogout}\n          className=\"button is-outlined is-danger is-small\"\n        >\n          Logout\n        </button>\n      </div>\n\n      <div className=\"todoapp__content\">\n\n        <Header\n          containsActive={todosStatus.isActive}\n          handleError={handleError}\n          setTodoCondition={setTodoCondition}\n          onTrickTempTodo={setTempTodo}\n          setTodos={setTodos}\n          toggleAllTodos={toggleAllTodos}\n          USER_ID={USER_ID}\n        />\n\n        {filteredTodos && (\n          <>\n            <section className=\"todoapp__main\">\n              <TodoList\n                todos={filteredTodos}\n                onDeleteTodo={handleDeleteTodo}\n                todoCondition={todoCondition}\n                procesingTodosId={procesingTodosId}\n                toggleTodo={toggleTodos}\n                handleSubmitEditing={handleSubmitEditing}\n              />\n\n              {tempTodo && (\n                <TodoItem\n                  todo={tempTodo}\n                  todoCondition={todoCondition}\n                />\n              )}\n            </section>\n          </>\n        )}\n\n        {!!todos.length && (\n          <Footer\n            containsCompleted={todosStatus.isCompleted}\n            onClearCompleted={clearCompleted}\n            itemsLeft={todos\n              .filter(({ completed }) => !completed).length}\n          />\n        )}\n      </div>\n\n      {\n        errorType !== ErrorType.None && (\n          <ErrorMessage errorType={errorType} handleError={setErrorType} />\n        )\n      }\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { AuthorizationPage } from './pages/AuthorizationPage';\nimport { TodosPage } from './pages/TodosPage';\nimport { User } from './types/User';\n\nconst getLocalUser = (): User | null => {\n  const stringUser: string | null = localStorage.getItem('user');\n\n  if (stringUser) {\n    return JSON.parse(stringUser);\n  }\n\n  return null;\n};\n\nexport const App: FC = () => {\n  const [user, setUser] = useState<User | null>(getLocalUser());\n\n  return (\n    <>\n      {user\n        ? (\n          <HashRouter>\n            <TodosPage user={user} />\n          </HashRouter>\n        )\n        : <AuthorizationPage setUser={setUser} />}\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}