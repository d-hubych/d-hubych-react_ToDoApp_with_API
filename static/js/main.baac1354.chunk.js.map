{"version":3,"sources":["utils/fetchClient.ts","types/ErrorType.ts","types/TodoCondition.ts","pages/AuthorizationPage.tsx","utils/filterTodos.ts","api/todos.ts","components/Header/Header.tsx","utils/noop.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/Footer/Footer.tsx","components/ErrorMessage/ErrorMessage.tsx","pages/TodosPage.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","ErrorType","TodoCondition","client","AuthorizationPage","setUser","useState","email","setEmail","name","setName","isUserNotFound","setIsUserNotFound","errAuthorization","setErrAuthorization","isDisabledInput","setIsDisabledInput","className","onSubmit","e","preventDefault","length","handleReceivedUser","receivedUser","user","id","localStorage","setItem","result","catch","onAuthorizationSubmit","type","placeholder","value","onChange","target","cn","disabled","minLength","deleteTodo","todoId","changeTodo","Header","containsActive","handleError","setTodoCondition","onTrickTempTodo","setTodos","toggleAllTodos","USER_ID","title","setTitle","isInputDisabled","setIsInputDisabled","handleSubmit","event","EmptyInput","Saving","todo","newTodo","userId","completed","prev","Add","finally","Neutral","classNames","active","aria-label","onClick","noop","TodoItem","todoCondition","onDeleteTodo","toggleTodo","handleSubmitEditing","isEditing","setIsEditing","editTitle","setEditTitle","onBlurOrSubmit","onDoubleClick","checked","onBlur","onKeyUp","key","TodoList","todos","procesingTodosId","map","thisTodoCondition","includes","Footer","containsCompleted","onClearCompleted","itemsLeft","to","isActive","selected","style","visibility","ErrorMessage","errorType","hidden","None","TodosPage","setErrorType","setProcesingTodosId","tempTodo","setTempTodo","pathname","useLocation","navigate","useNavigate","err","useEffect","Load","todosStatus","useMemo","some","isCompleted","toggleTodos","curentTodos","forEach","curentTodo","state","copyTodos","indexCurTodo","findIndex","newStatus","Update","filteredTodos","filter","filterTodos","toUpperCase","removeItem","Deleting","Delete","newTitle","prevTodos","App","stringUser","getItem","parse","getLocalUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baac1354.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// returns a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: {} | null = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // we wait for testing purpose to see loaders\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Something went wrong with the request to the server');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: {}) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: {}) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","// eslint-disable-next-line no-shadow\nexport enum ErrorType {\n  None = 'None',\n  Add = 'Add',\n  Delete = 'Delete',\n  Update = 'Update',\n  Load = 'Load',\n  EmptyInput = 'EmptyInput',\n}\n","// eslint-disable-next-line no-shadow\nexport enum TodoCondition {\n  Neutral = 'Neutral',\n  Saving = 'Saving',\n  Deleting = 'Deleting',\n}\n","import React, {\n  FC,\n  useState,\n  FormEvent,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport cn from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\ntype Props = {\n  setUser: Dispatch<SetStateAction<User | null>>;\n};\n\nexport const AuthorizationPage: FC<Props> = ({ setUser }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [isUserNotFound, setIsUserNotFound] = useState<boolean>(false);\n  const [errAuthorization, setErrAuthorization] = useState<boolean>(false);\n  const [isDisabledInput, setIsDisabledInput] = useState(false);\n  const minInputLength = 3;\n\n  const onAuthorizationSubmit = (\n    e: FormEvent<HTMLFormElement> | FormEvent<HTMLButtonElement>,\n  ) => {\n    e.preventDefault();\n\n    if (email.length < minInputLength) {\n      return;\n    }\n\n    const handleReceivedUser = (receivedUser: User) => {\n      const user = {\n        id: receivedUser.id,\n        email: receivedUser.email,\n        name: receivedUser.name,\n      };\n\n      setUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n    };\n\n    if (isUserNotFound) {\n      client.post<User>('/users', { email, name })\n        .then((result) => {\n          handleReceivedUser(result);\n        })\n        .catch(() => {\n          setErrAuthorization(true);\n        });\n    } else {\n      client.get<User[]>(`/users?email=${email}`)\n        .then((result) => {\n          const user = result[0];\n\n          if (user) {\n            handleReceivedUser(user);\n          } else {\n            setIsUserNotFound(true);\n            setIsDisabledInput(true);\n          }\n        })\n        .catch(() => setErrAuthorization(true));\n    }\n  };\n\n  return (\n    <div className=\"todoapp authorization\">\n      <div className=\"todoapp__content authorization__content\">\n        Please, login to get yours todos\n\n        <form\n          method=\"post\"\n          onSubmit={(e) => onAuthorizationSubmit(e)}\n          className=\"authorization__form\"\n        >\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Enter your email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className={cn(\n              'input is-primary',\n              'authorization__input',\n            )}\n            disabled={isDisabledInput}\n            minLength={minInputLength}\n          />\n\n          {isUserNotFound && (\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter your name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              minLength={minInputLength}\n              className={cn(\n                'input is-primary',\n                'authorization__input',\n              )}\n            />\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"button is-primary\"\n          >\n            confirm\n          </button>\n        </form>\n\n        {errAuthorization && (\n          <p>Something went wrong with the authorization.</p>\n        )}\n      </div>\n\n    </div>\n  );\n};\n","import { Todo } from '../types/Todo';\n\nexport const filterTodos = (todos: Todo[], pathname: string) => {\n  switch (pathname) {\n    case '/completed':\n      return todos.filter(todo => todo.completed === true);\n    case '/active':\n      return todos.filter(todo => todo.completed === false);\n    default:\n      return todos;\n  }\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const addTodo = (todo: Todo): Promise<Todo> => {\n  return client.post('/todos/', todo);\n};\n\nexport const changeTodo = (todoId: number, data: {}) => {\n  return client.patch(`/todos/${todoId}`, data);\n};\n","import React, {\n  FC,\n  useState,\n  FormEvent,\n  Dispatch,\n  SetStateAction,\n} from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../../types/ErrorType';\nimport { Todo } from '../../types/Todo';\nimport { addTodo } from '../../api/todos';\nimport { TodoCondition } from '../../types/TodoCondition';\n\ntype Props = {\n  containsActive: boolean,\n  handleError: (err: ErrorType) => void,\n  setTodoCondition: (arg: TodoCondition) => void,\n  onTrickTempTodo: (newTodo: Todo | null) => void,\n  setTodos: Dispatch<SetStateAction<Todo[]>>,\n  toggleAllTodos: () => void,\n  USER_ID: number,\n};\n\nexport const Header: FC<Props> = ({\n  containsActive,\n  handleError,\n  setTodoCondition,\n  onTrickTempTodo,\n  setTodos,\n  toggleAllTodos,\n  USER_ID,\n}) => {\n  const [title, setTitle] = useState<string>('');\n  const [isInputDisabled, setIsInputDisabled] = useState<boolean>(false);\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!title) {\n      return handleError(ErrorType.EmptyInput);\n    }\n\n    setIsInputDisabled(true);\n    setTodoCondition(TodoCondition.Saving);\n\n    const newTodo = {\n      id: 0,\n      userId: USER_ID,\n      title,\n      completed: false,\n    };\n\n    onTrickTempTodo(newTodo);\n    setTitle('');\n\n    return addTodo(newTodo)\n      .then((result) => {\n        onTrickTempTodo(null);\n        setTodos((prev: Todo[]) => [...prev, result]);\n      })\n      .catch(() => handleError(ErrorType.Add))\n      .finally(() => {\n        setTodoCondition(TodoCondition.Neutral);\n        setIsInputDisabled(false);\n      });\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        type=\"button\"\n        className={classNames(\n          'todoapp__toggle-all',\n          { active: containsActive },\n        )}\n        aria-label=\"Complete all todos button\"\n        onClick={toggleAllTodos}\n      />\n\n      <form onSubmit={(e) => handleSubmit(e)}>\n        <input\n          type=\"text\"\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={({ target }) => setTitle(target.value)}\n          disabled={isInputDisabled}\n        />\n      </form>\n    </header>\n  );\n};\n","// noop is No Operation function for some undefined props\nexport const noop = () => {};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { TodoCondition } from '../../types/TodoCondition';\nimport { noop } from '../../utils/noop';\n\ntype Props = {\n  todo: Todo,\n  todoCondition: TodoCondition,\n  onDeleteTodo?: (todoId: number) => void,\n  toggleTodo?: (curentTodos: Todo[], isCompleted?: boolean) => void,\n  handleSubmitEditing?: (id: number, editTitle: string) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  todoCondition,\n  onDeleteTodo = noop,\n  toggleTodo = noop,\n  handleSubmitEditing = noop,\n}) => {\n  const { id, title, completed } = todo;\n  const [isEditing, setIsEditing] = useState(false);\n  const [editTitle, setEditTitle] = useState(title);\n\n  const handleSubmit = () => {\n    if (editTitle === '') {\n      onDeleteTodo(id);\n    }\n\n    if (editTitle !== title) {\n      handleSubmitEditing(id, editTitle);\n    }\n\n    setIsEditing(false);\n  };\n\n  const cancelEditing = (key: string) => {\n    if (key === 'Escape') {\n      setIsEditing(false);\n      setEditTitle(title);\n    }\n  };\n\n  const onBlurOrSubmit = (e: React.FocusEvent<HTMLInputElement>\n  | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    handleSubmit();\n  };\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEditTitle(e.target.value);\n  };\n\n  const onKeyUp = (e: React.KeyboardEvent) => {\n    cancelEditing(e.key);\n  };\n\n  return (\n    <div\n      className={classNames(\n        'todo',\n        { completed },\n      )}\n      onDoubleClick={() => setIsEditing(true)}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          type=\"checkbox\"\n          className=\"todo__status\"\n          checked={completed}\n          onChange={() => toggleTodo([todo])}\n        />\n      </label>\n\n      {isEditing\n        ? (\n          <form onSubmit={onBlurOrSubmit}>\n            <input\n              type=\"text\"\n              className=\"todo__title-field\"\n              placeholder=\"Empty todo will be deleted\"\n              value={editTitle}\n              onChange={onChange}\n              onBlur={onBlurOrSubmit}\n              onKeyUp={onKeyUp}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span className=\"todo__title\">{title}</span>\n\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              onClick={() => onDeleteTodo(id)}\n            >\n              x\n            </button>\n          </>\n        )}\n\n      <div className={classNames(\n        'modal',\n        'overlay',\n        { 'is-active': todoCondition !== TodoCondition.Neutral },\n      )}\n      >\n        <div className=\"modal-background has-background-white-ter\" />\n        <div className=\"loader\" />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem';\nimport { TodoCondition } from '../../types/TodoCondition';\n\ntype Props = {\n  todos: Todo[],\n  onDeleteTodo: (todoId: number) => void,\n  procesingTodosId: number[],\n  todoCondition: TodoCondition,\n  toggleTodo: (curentTodo: Todo[], isCompleted?: boolean) => void,\n  handleSubmitEditing: (id: number, updatedTitle: string) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onDeleteTodo,\n  procesingTodosId,\n  todoCondition,\n  toggleTodo,\n  handleSubmitEditing,\n}) => {\n  return (\n    <>\n      {todos.map((todo: Todo) => {\n        let thisTodoCondition = TodoCondition.Neutral;\n\n        if (procesingTodosId.includes(todo.id)) {\n          thisTodoCondition = todoCondition;\n        }\n\n        return (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            onDeleteTodo={onDeleteTodo}\n            todoCondition={thisTodoCondition}\n            toggleTodo={toggleTodo}\n            handleSubmitEditing={handleSubmitEditing}\n          />\n        );\n      })}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport classNames from 'classnames';\n\ntype Props = {\n  containsCompleted: boolean,\n  onClearCompleted: () => void,\n  itemsLeft: number,\n};\n\nexport const Footer: FC<Props> = ({\n  containsCompleted,\n  onClearCompleted,\n  itemsLeft,\n}) => {\n  return (\n    <footer className=\"todoapp__footer\">\n      <span className=\"todo-count\">\n        {`${itemsLeft} items left`}\n      </span>\n\n      <nav className=\"filter\">\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          All\n        </NavLink>\n\n        <NavLink\n          to=\"active\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          Active\n        </NavLink>\n\n        <NavLink\n          to=\"completed\"\n          className={({ isActive }) => classNames(\n            'filter__link',\n            { selected: isActive },\n          )}\n        >\n          Completed\n        </NavLink>\n      </nav>\n\n      <button\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        style={{ visibility: containsCompleted ? 'visible' : 'hidden' }}\n        onClick={onClearCompleted}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import React, { FC } from 'react';\nimport classNames from 'classnames';\nimport { ErrorType } from '../../types/ErrorType';\n\ntype Props = {\n  errorType: ErrorType,\n  handleError: (err: ErrorType) => void,\n};\n\nexport const ErrorMessage: FC<Props> = ({ errorType, handleError }) => (\n  <div className={classNames(\n    'notification',\n    'is-danger',\n    'is-light',\n    'has-text-weight-normal',\n    { hidden: errorType === ErrorType.None },\n  )}\n  >\n    <button\n      type=\"button\"\n      className=\"delete\"\n      onClick={() => handleError(ErrorType.None)}\n      aria-label=\"close error\"\n    />\n    {errorType === ErrorType.EmptyInput\n      ? \"Title can't be empty\"\n      : `Unable to ${errorType} a todo`}\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, {\n  FC,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nimport { Todo } from '../types/Todo';\nimport { ErrorType } from '../types/ErrorType';\nimport { TodoCondition } from '../types/TodoCondition';\nimport { User } from '../types/User';\n\nimport { filterTodos } from '../utils/filterTodos';\nimport {\n  deleteTodo,\n  getTodos,\n  changeTodo,\n} from '../api/todos';\n\nimport { Header } from '../components/Header';\nimport { TodoList } from '../components/TodoList';\nimport { TodoItem } from '../components/TodoItem';\nimport { Footer } from '../components/Footer/Footer';\nimport { ErrorMessage } from '../components/ErrorMessage';\n\ntype Props = {\n  user: User,\n};\n\nexport const TodosPage: FC<Props> = ({ user }) => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorType, setErrorType] = useState(ErrorType.None);\n  const [todoCondition, setTodoCondition]\n    = useState<TodoCondition>(TodoCondition.Neutral);\n  const [procesingTodosId, setProcesingTodosId] = useState<number[]>([]);\n  const [tempTodo, setTempTodo] = useState<Todo | null>(null);\n  const { pathname } = useLocation();\n  const navigate = useNavigate();\n  const USER_ID = user.id;\n\n  const handleError = (err: ErrorType) => {\n    if (err !== ErrorType.None) {\n      setTimeout(() => setErrorType(ErrorType.None), 3000);\n    }\n\n    setErrorType(err);\n  };\n\n  useEffect(() => {\n    if (USER_ID) {\n      getTodos(USER_ID)\n        .then(result => {\n          setTodos(result);\n        })\n        .catch(() => handleError(ErrorType.Load));\n    }\n  }, [USER_ID]);\n\n  const todosStatus = useMemo(() => {\n    return {\n      isActive: todos.some(todo => todo.completed === false),\n      isCompleted: todos.some(todo => todo.completed === true),\n    };\n  }, [todos]);\n\n  const handleDeleteTodo = (todoId: number) => {\n    setTodoCondition(TodoCondition.Deleting);\n    setProcesingTodosId([todoId]);\n    deleteTodo(todoId)\n      .then(() => setTodos(prev => prev.filter(({ id }) => id !== todoId)))\n      .catch(() => handleError(ErrorType.Delete))\n      .finally(() => setTodoCondition(TodoCondition.Neutral));\n  };\n\n  const clearCompleted = () => {\n    setTodoCondition(TodoCondition.Deleting);\n\n    todos?.forEach(todo => {\n      if (todo.completed) {\n        setProcesingTodosId((state) => [...state, todo.id]);\n        deleteTodo(todo.id)\n          .then(() => setTodos(prev => prev.filter(({ id }) => id !== todo.id)))\n          .catch(() => handleError(ErrorType.Delete))\n          .finally(() => setTodoCondition(TodoCondition.Neutral));\n      }\n    });\n  };\n\n  const toggleTodos = (curentTodos: Todo[], isCompleted?: boolean) => {\n    setTodoCondition(TodoCondition.Saving);\n\n    curentTodos.forEach(curentTodo => {\n      if (curentTodo.completed !== isCompleted) {\n        setProcesingTodosId((state) => [...state, curentTodo.id]);\n      }\n\n      const copyTodos = [...todos];\n      const indexCurTodo = copyTodos\n        .findIndex(({ id }) => id === curentTodo.id);\n      const newStatus: boolean = isCompleted || !curentTodo.completed;\n\n      copyTodos[indexCurTodo].completed = newStatus;\n\n      changeTodo(curentTodo.id, { completed: newStatus })\n        .then(() => {\n          setTodos(copyTodos);\n        })\n        .catch(() => handleError(ErrorType.Update))\n        .finally(() => {\n          setProcesingTodosId([]);\n          setTodoCondition(TodoCondition.Neutral);\n        });\n    });\n  };\n\n  const toggleAllTodos = () => {\n    toggleTodos(todos, todosStatus.isActive);\n  };\n\n  const handleSubmitEditing = (todoId: number, newTitle: string) => {\n    setProcesingTodosId([todoId]);\n    setTodoCondition(TodoCondition.Saving);\n\n    changeTodo(todoId, { title: newTitle })\n      .then(() => setTodos(prevTodos => prevTodos.map(todo => {\n        if (todo.id === todoId) {\n          return {\n            ...todo,\n            title: newTitle,\n          };\n        }\n\n        return todo;\n      })))\n      .catch(() => ErrorType.Update)\n      .finally(() => {\n        setProcesingTodosId([]);\n        setTodoCondition(TodoCondition.Neutral);\n      });\n  };\n\n  const onLogout = () => {\n    localStorage.removeItem('user');\n    navigate(0);\n  };\n\n  const filteredTodos = todos ? filterTodos(todos, pathname) : [];\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__user\">\n        {`Hello ${user.name.toUpperCase()} 😊`}\n\n        <button\n          type=\"button\"\n          onClick={onLogout}\n          className=\"button is-outlined is-danger is-small\"\n        >\n          Logout\n        </button>\n      </div>\n\n      <div className=\"todoapp__content\">\n\n        <Header\n          containsActive={todosStatus.isActive}\n          handleError={handleError}\n          setTodoCondition={setTodoCondition}\n          onTrickTempTodo={setTempTodo}\n          setTodos={setTodos}\n          toggleAllTodos={toggleAllTodos}\n          USER_ID={USER_ID}\n        />\n\n        {filteredTodos && (\n          <>\n            <section className=\"todoapp__main\">\n              <TodoList\n                todos={filteredTodos}\n                onDeleteTodo={handleDeleteTodo}\n                todoCondition={todoCondition}\n                procesingTodosId={procesingTodosId}\n                toggleTodo={toggleTodos}\n                handleSubmitEditing={handleSubmitEditing}\n              />\n\n              {tempTodo && (\n                <TodoItem\n                  todo={tempTodo}\n                  todoCondition={todoCondition}\n                />\n              )}\n            </section>\n          </>\n        )}\n\n        {!!todos.length && (\n          <Footer\n            containsCompleted={todosStatus.isCompleted}\n            onClearCompleted={clearCompleted}\n            itemsLeft={todos\n              .filter(({ completed }) => !completed).length}\n          />\n        )}\n      </div>\n\n      {\n        errorType !== ErrorType.None && (\n          <ErrorMessage errorType={errorType} handleError={setErrorType} />\n        )\n      }\n    </div>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { AuthorizationPage } from './pages/AuthorizationPage';\nimport { TodosPage } from './pages/TodosPage';\nimport { User } from './types/User';\n\nconst getLocalUser = (): User | null => {\n  const stringUser: string | null = localStorage.getItem('user');\n\n  if (stringUser) {\n    return JSON.parse(stringUser);\n  }\n\n  return null;\n};\n\nexport const App: FC = () => {\n  const [user, setUser] = useState<User | null>(getLocalUser());\n\n  return (\n    <>\n      {user\n        ? (\n          <HashRouter>\n            <TodosPage user={user} />\n          </HashRouter>\n        )\n        : <AuthorizationPage setUser={setUser} />}\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bulma/css/bulma.css';\nimport './styles/index.scss';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}